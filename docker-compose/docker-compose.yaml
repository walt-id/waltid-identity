services:
  wallet-api:
    image: docker.io/waltid/wallet-api:${VERSION_TAG:-latest}
    pull_policy: always
    build:
      context: ../
      dockerfile: waltid-wallet-api/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      caddy:
        condition: service_started
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./wallet-api/config:/waltid-wallet-api/config
      - ./wallet-api/walt.yaml:/waltid-wallet-api/walt.yaml
      - ./wallet-api/data:/waltid-wallet-api/data

  issuer-api:
    platform: linux/x86_64
    image: docker.io/waltid/issuer-api:${VERSION_TAG:-latest}
    pull_policy: always
    depends_on:
      - caddy
    env_file:
      - .env
    volumes:
      - ./issuer-api/config:/waltid-issuer-api/config

  verifier-api:
    platform: linux/x86_64
    image: docker.io/waltid/verifier-api:${VERSION_TAG:-latest}
    pull_policy: always
    depends_on:
      - caddy
    env_file:
      - .env
    volumes:
      - ./verifier-api/config:/waltid-verifier-api/config

  waltid-web-wallet:
    image: docker.io/waltid/waltid-web-wallet:${VERSION_TAG:-latest}
    pull_policy: always
    depends_on:
      - wallet-api
      - caddy
    environment:
      NUXT_PUBLIC_ISSUER_CALLBACK_URL: "http://localhost:$WALLET_FRONTEND_PORT"
      PORT: $WALLET_FRONTEND_PORT

  web-portal:
    platform: linux/x86_64
    image: docker.io/waltid/portal:${VERSION_TAG:-latest}
    pull_policy: always
    depends_on:
      - caddy
    environment:
      NEXT_PUBLIC_VC_REPO: "http://localhost:$VC_REPO_PORT"
      NEXT_PUBLIC_ISSUER: "http://localhost:$ISSUER_API_PORT"
      NEXT_PUBLIC_VERIFIER: "http://localhost:$VERIFIER_API_PORT"
      NEXT_PUBLIC_WALLET: "http://localhost:$WALLET_FRONTEND_PORT"
      PORT: $WEB_PORTAL_PORT

  vc-repo:
    platform: linux/x86_64
    image: docker.io/waltid/vc-repository:latest
    pull_policy: always
    depends_on:
      - caddy
    environment:
      PORT: $VC_REPO_PORT

  postgres:
    image: docker.io/library/postgres
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-U", "$DB_USERNAME" ]
      interval: 5s
      timeout: 1s
      retries: 5
    restart: always
    environment:
      POSTGRES_DB: $DB_NAME
      POSTGRES_USER: $DB_USERNAME
      POSTGRES_PASSWORD: $DB_PASSWORD
    volumes:
      - wallet-api-db:/waltid-wallet-api/data
    ports:
      - $POSTGRES_DB_PORT:$POSTGRES_DB_PORT #TODO: tcp/udp proxy with caddy

  caddy:
    image: docker.io/caddy:2
    restart: unless-stopped
    env_file:
      - .env
    cap_add:
      - NET_ADMIN
    ports:

      - target: "$WALLET_BACKEND_PORT"
        published: $WALLET_BACKEND_PORT # wallet-api
        protocol: tcp
        mode: host

      - target: "$ISSUER_API_PORT"
        published: $ISSUER_API_PORT # issuer-api
        protocol: tcp
        mode: host

      - target: "$VERIFIER_API_PORT"
        published: $VERIFIER_API_PORT # verifier-api
        protocol: tcp
        mode: host

      - target: "$WALLET_FRONTEND_PORT"
        published: $WALLET_FRONTEND_PORT # waltid-web-wallet
        protocol: tcp
        mode: host

      - target: "$WEB_PORTAL_PORT"
        published: $WEB_PORTAL_PORT # web-portal
        protocol: tcp
        mode: host

      - target: "$VC_REPO_PORT"
        published: $VC_REPO_PORT # vc-repo
        protocol: tcp
        mode: host

      - target: "$PG_ADMIN_PORT"
        published: $PG_ADMIN_PORT # pg-admin
        protocol: tcp
        mode: host

    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
volumes:
  wallet-api-db:
