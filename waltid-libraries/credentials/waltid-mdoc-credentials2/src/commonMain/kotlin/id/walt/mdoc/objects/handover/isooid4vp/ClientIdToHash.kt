package id.walt.mdoc.objects.handover.isooid4vp

import kotlinx.serialization.ExperimentalSerializationApi
import kotlinx.serialization.Serializable
import kotlinx.serialization.cbor.CborArray

/**
 * An intermediate data structure representing the content to be hashed for creating the `clientIdHash`
 * in an older mdoc handover mechanism for OID4VP.
 *
 * ### Deprecation Notice & Context
 * This structure is defined in **ISO/IEC TS 18013-7:2024(en), Annex B.4.4**. However, this mechanism
 * has been **superseded** in the final **OpenID for Verifiable Presentations 1.0** specification.
 * The newer specification (in Appendix B.2.6.1) uses a different structure, `OpenID4VPHandoverInfo`,
 * which does not hash the `clientId` and `responseUri` separately.
 *
 * This class is maintained for compatibility with systems based on the ISO/IEC TS but should be
 * considered deprecated in favor of the newer OID4VP 1.0 standard for new implementations.
 *
 * @see ISO/IEC TS 18013-7:2024(en), B.4.4 (Session Transcript)
 *
 * @property clientId The Client Identifier of the mdoc reader (verifier). This value, along with the nonce,
 * is hashed to bind the transaction to a specific verifier.
 * @property mdocGeneratedNonce A cryptographically random nonce generated by the mdoc. It ensures the uniqueness
 * of the hash for this specific transaction. Per the specification, it must have at least 16 bytes of entropy.
 */
@OptIn(ExperimentalSerializationApi::class)
@Serializable
@CborArray
@Deprecated("Legacy 18013-7 handling")
data class ClientIdToHash(
    /**
     * The value for client_id is the Client Identifier of the
     * mdoc reader that corresponds to the Client Identifier
     * scheme.
     */
    val clientId: String,

    /**
     * "The mdoc shall set the value for mdocGeneratedNonce to
     * a cryptographically random number with sufficient entropy.
     * ...
     * As such, nonces shall be an unpredictable random or pseudorandom
     * value. Nonces shall have a minimum entropy of 16 bytes. A new
     * nonce value shall be chosen for each transaction."
     */
    val mdocGeneratedNonce: String
)
