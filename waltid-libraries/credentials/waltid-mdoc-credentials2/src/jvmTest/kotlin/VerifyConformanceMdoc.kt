import id.walt.crypto.keys.jwk.JWKKey
import id.walt.mdoc.crypto.MdocCrypto
import id.walt.mdoc.crypto.MdocCryptoHelper
import id.walt.mdoc.parser.MdocParser
import id.walt.mdoc.verification.MdocVerifier
import id.walt.mdoc.verification.VerificationContext
import kotlinx.coroutines.test.runTest
import kotlin.test.Test
import kotlin.test.assertTrue

class VerifyConformanceMdoc {

    companion object {
        private const val vpTokenMdocBase64 =
            ""

        private const val clientId = "x509_san_dns:verifier.example.com"
        private const val nonce = "ed441c8c-428e-4b9a-807b-b3873f82e03e"
        private val jwkThumbprint = null
        private const val responseUri = "https://verifier2.localhost/verification-session/9e1f6432-338b-4938-9339-2c194bc76ef4/response"
        private val verificationContext = VerificationContext(nonce, clientId, responseUri)
    }

    @Test
    fun verifyConformanceMdocSignature() = runTest {
        println("==== VERIFICATION: Mdoc Device Signature ====")
        val document = MdocParser.parseToDocument(vpTokenMdocBase64)
        val mso = document.issuerSigned.decodeMobileSecurityObject()
        val sessionTranscript = MdocCryptoHelper.reconstructOid4vpSessionTranscript(verificationContext)

        println("--- Verifying device authentication ---")

        val deviceSigned = document.deviceSigned ?: throw IllegalArgumentException("DeviceSigned structure is missing.")
        println("Device signed: $deviceSigned")


        val devicePublicKey = JWKKey.importJWK(mso.deviceKeyInfo.deviceKey.toJWK().toString()).getOrThrow()
        println("Device public key: $devicePublicKey")

        val deviceAuth = deviceSigned.deviceAuth
        println("Device auth (of device signed): $deviceAuth")

        val deviceAuthBytes = MdocCryptoHelper.buildDeviceAuthenticationBytes(
            sessionTranscript,
            document.docType,
            deviceSigned.namespaces
        )
        println("Device auth bytes (hex): ${deviceAuthBytes.toHexString()}")

        println("Device auth contains device signature: ${deviceAuth.deviceSignature}")

        val verifyResult = MdocCrypto.verifyDeviceSignature(
            payloadToVerify = deviceAuthBytes,
            deviceSignature = deviceAuth.deviceSignature!!,
            sDevicePublicKey = devicePublicKey
        )
        println("Key (from MSO): $verifyResult")

        require(verifyResult)
    }

    @Test
    fun verifyConformanceMdoc() = runTest {
        println("==== VERIFICATION: MdocVerifier ====")
        val verificationResult = MdocVerifier.verify(vpTokenMdocBase64, verificationContext)
        println("Verification result: $verificationResult")

        assertTrue { verificationResult.valid }
    }

}
