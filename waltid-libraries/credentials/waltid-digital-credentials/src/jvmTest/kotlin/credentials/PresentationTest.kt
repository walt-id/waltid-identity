package credentials

		import id.walt.credentials.presentations.formats.DcSdJwtPresentation
		import id.walt.credentials.presentations.formats.JwtVcJsonPresentation
		import id.walt.did.helpers.WaltidServices
		import kotlinx.coroutines.test.runTest
		import kotlin.test.Test

		class PresentationTest {

		    companion object {
		        var hasInit = false

		        suspend fun init() {
		            hasInit = true
		            WaltidServices.minimalInit()
		        }
		    }

		    @Test
		    fun testJwtVcPresentationParsing() = runTest {
		        init()
		        val jwtVp1 =
		            "eyJraWQiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTcjekRuYWVZYjdEYWtRV21Za3JMa21zVkVSQWF6RjVZYTFHNW54YlNuUWNMSlo4Q3IxNyIsInR5cCI6IkpXVCIsImFsZyI6IkVTMjU2In0.eyJzdWIiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTciLCJuYmYiOjE3NTM5MTg2ODYsImlhdCI6MTc1MzkxODc0NiwianRpIjoidXJuOnV1aWQ6NDc5NjEwYzctMmRkNC00YjJhLTg0MjEtODJhMWMwOGNkYmU0IiwiaXNzIjoiZGlkOmtleTp6RG5hZVliN0Rha1FXbVlrckxrbXNWRVJBYXpGNVlhMUc1bnhiU25RY0xKWjhDcjE3Iiwibm9uY2UiOiJjZmQxY2FiZi0wODFlLTRlN2ItOTc1MS02ZmJkNTcyMmU4OGUiLCJhdWQiOiJ2ZXJpZmllcjItZXhhbXBsZSIsInZwIjp7IkBjb250ZXh0IjpbImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZVByZXNlbnRhdGlvbiJdLCJpZCI6InVybjp1dWlkOjQ3OTYxMGM3LTJkZDQtNGIyYS04NDIxLTgyYTFjMDhjZGJlNCIsImhvbGRlciI6ImRpZDprZXk6ekRuYWVZYjdEYWtRV21Za3JMa21zVkVSQWF6RjVZYTFHNW54YlNuUWNMSlo4Q3IxNyIsImNuZiI6bnVsbCwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKcmFXUWlPaUprYVdRNmEyVjVPbm8yVFd0cWIxSm9jVEZxVTA1S1pFeHBjblZUV0hKR1JuaGhaM0Z5ZW5SYVlWaEljVWhIVlZSTFNtSmpUbmwzY0NONk5rMXJhbTlTYUhFeGFsTk9TbVJNYVhKMVUxaHlSa1o0WVdkeGNucDBXbUZZU0hGSVIxVlVTMHBpWTA1NWQzQWlMQ0owZVhBaU9pSktWMVFpTENKaGJHY2lPaUpGWkVSVFFTSjkuZXlKcGMzTWlPaUprYVdRNmEyVjVPbm8yVFd0cWIxSm9jVEZxVTA1S1pFeHBjblZUV0hKR1JuaGhaM0Z5ZW5SYVlWaEljVWhIVlZSTFNtSmpUbmwzY0NJc0luTjFZaUk2SW1ScFpEcHJaWGs2ZWtSdVlXVlpZamRFWVd0UlYyMVphM0pNYTIxelZrVlNRV0Y2UmpWWllURkhOVzU0WWxOdVVXTk1TbG80UTNJeE55SXNJblpqSWpwN0lrQmpiMjUwWlhoMElqcGJJbWgwZEhCek9pOHZkM2QzTG5jekxtOXlaeTh5TURFNEwyTnlaV1JsYm5ScFlXeHpMM1l4SWl3aWFIUjBjSE02THk5d2RYSnNMbWx0YzJkc2IySmhiQzV2Y21jdmMzQmxZeTl2WWk5Mk0zQXdMMk52Ym5SbGVIUXVhbk52YmlKZExDSnBaQ0k2SW5WeWJqcDFkV2xrT21WaFpXSTRaR1U1TFdVeE5EQXROR1prTXkwNE1tTmtMVEk1WkdZek4yTm1NVGRsWXlJc0luUjVjR1VpT2xzaVZtVnlhV1pwWVdKc1pVTnlaV1JsYm5ScFlXd2lMQ0pQY0dWdVFtRmtaMlZEY21Wa1pXNTBhV0ZzSWwwc0ltNWhiV1VpT2lKS1JrWWdlQ0IyWXkxbFpIVWdVR3gxWjBabGMzUWdNeUJKYm5SbGNtOXdaWEpoWW1sc2FYUjVJaXdpYVhOemRXVnlJanA3SW5SNWNHVWlPbHNpVUhKdlptbHNaU0pkTENKdVlXMWxJam9pU205aWN5Qm1iM0lnZEdobElFWjFkSFZ5WlNBb1NrWkdLU0lzSW5WeWJDSTZJbWgwZEhCek9pOHZkM2QzTG1wbVppNXZjbWN2SWl3aWFXMWhaMlVpT2lKb2RIUndjem92TDNjell5MWpZMmN1WjJsMGFIVmlMbWx2TDNaakxXVmtMM0JzZFdkbVpYTjBMVEV0TWpBeU1pOXBiV0ZuWlhNdlNrWkdYMHh2WjI5TWIyTnJkWEF1Y0c1bklpd2lhV1FpT2lKa2FXUTZhMlY1T25vMlRXdHFiMUpvY1RGcVUwNUtaRXhwY25WVFdISkdSbmhoWjNGeWVuUmFZVmhJY1VoSFZWUkxTbUpqVG5sM2NDSjlMQ0pqY21Wa1pXNTBhV0ZzVTNWaWFtVmpkQ0k2ZXlKMGVYQmxJanBiSWtGamFHbGxkbVZ0Wlc1MFUzVmlhbVZqZENKZExDSmhZMmhwWlhabGJXVnVkQ0k2ZXlKcFpDSTZJblZ5YmpwMWRXbGtPbUZqTWpVMFltUTFMVGhtWVdRdE5HSmlNUzA1WkRJNUxXVm1aRGt6T0RVek5qa3lOaUlzSW5SNWNHVWlPbHNpUVdOb2FXVjJaVzFsYm5RaVhTd2libUZ0WlNJNklrcEdSaUI0SUhaakxXVmtkU0JRYkhWblJtVnpkQ0F6SUVsdWRHVnliM0JsY21GaWFXeHBkSGtpTENKa1pYTmpjbWx3ZEdsdmJpSTZJbFJvYVhNZ2QyRnNiR1YwSUhOMWNIQnZjblJ6SUhSb1pTQjFjMlVnYjJZZ1Z6TkRJRlpsY21sbWFXRmliR1VnUTNKbFpHVnVkR2xoYkhNZ1lXNWtJR2hoY3lCa1pXMXZibk4wY21GMFpXUWdhVzUwWlhKdmNHVnlZV0pwYkdsMGVTQmtkWEpwYm1jZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCeVpYRjFaWE4wSUhkdmNtdG1iRzkzSUdSMWNtbHVaeUJLUmtZZ2VDQldReTFGUkZVZ1VHeDFaMFpsYzNRZ015NGlMQ0pqY21sMFpYSnBZU0k2ZXlKMGVYQmxJam9pUTNKcGRHVnlhV0VpTENKdVlYSnlZWFJwZG1VaU9pSlhZV3hzWlhRZ2MyOXNkWFJwYjI1eklIQnliM1pwWkdWeWN5QmxZWEp1WldRZ2RHaHBjeUJpWVdSblpTQmllU0JrWlcxdmJuTjBjbUYwYVc1bklHbHVkR1Z5YjNCbGNtRmlhV3hwZEhrZ1pIVnlhVzVuSUhSb1pTQndjbVZ6Wlc1MFlYUnBiMjRnY21WeGRXVnpkQ0IzYjNKclpteHZkeTRnVkdocGN5QnBibU5zZFdSbGN5QnpkV05qWlhOelpuVnNiSGtnY21WalpXbDJhVzVuSUdFZ2NISmxjMlZ1ZEdGMGFXOXVJSEpsY1hWbGMzUXNJR0ZzYkc5M2FXNW5JSFJvWlNCb2IyeGtaWElnZEc4Z2MyVnNaV04wSUdGMElHeGxZWE4wSUhSM2J5QjBlWEJsY3lCdlppQjJaWEpwWm1saFlteGxJR055WldSbGJuUnBZV3h6SUhSdklHTnlaV0YwWlNCaElIWmxjbWxtYVdGaWJHVWdjSEpsYzJWdWRHRjBhVzl1TENCeVpYUjFjbTVwYm1jZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCMGJ5QjBhR1VnY21WeGRXVnpkRzl5TENCaGJtUWdjR0Z6YzJsdVp5QjJaWEpwWm1sallYUnBiMjRnYjJZZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCaGJtUWdkR2hsSUdsdVkyeDFaR1ZrSUdOeVpXUmxiblJwWVd4ekxpSjlMQ0pwYldGblpTSTZleUpwWkNJNkltaDBkSEJ6T2k4dmR6TmpMV05qWnk1bmFYUm9kV0l1YVc4dmRtTXRaV1F2Y0d4MVoyWmxjM1F0TXkweU1ESXpMMmx0WVdkbGN5OUtSa1l0VmtNdFJVUlZMVkJNVlVkR1JWTlVNeTFpWVdSblpTMXBiV0ZuWlM1d2JtY2lMQ0owZVhCbElqb2lTVzFoWjJVaWZYMHNJbWxrSWpvaVpHbGtPbXRsZVRwNlJHNWhaVmxpTjBSaGExRlhiVmxyY2t4cmJYTldSVkpCWVhwR05WbGhNVWMxYm5oaVUyNVJZMHhLV2poRGNqRTNJbjBzSW1semMzVmhibU5sUkdGMFpTSTZJakl3TWpVdE1EY3RNekJVTWpNNk16azZNREl1T1RJeE1EQXlNVGN5V2lJc0ltVjRjR2x5WVhScGIyNUVZWFJsSWpvaU1qQXlOaTB3Tnkwek1GUXlNem96T1Rvd01pNDVNakV3T1RVeU56TmFJbjBzSW1wMGFTSTZJblZ5YmpwMWRXbGtPbVZoWldJNFpHVTVMV1V4TkRBdE5HWmtNeTA0TW1Oa0xUSTVaR1l6TjJObU1UZGxZeUlzSW1WNGNDSTZNVGM0TlRRMU5EYzBNaXdpYVdGMElqb3hOelV6T1RFNE56UXlMQ0p1WW1ZaU9qRTNOVE01TVRnM05ESjkuOWJiRGl1My1xM25xYl9JVXRFWlVuaENLdlpfYUs0QjBuaGNBUnpsb0FQU2NNM25kZUhWYTV2cG9kbEd1Z0lWUXB6TzFPSGlEcGN3dVZzT0JPakNrQlEiXX19.Od6DX18rTycJQxsdgozwgN3NVXUkti-e_OpJig75Kn18VOKaFl98y5KnPE3KIa5rFfmU_fyzWKzkPtvP9oQqBw"
		        val presentation = JwtVcJsonPresentation.parse(jwtVp1)
		            .getOrThrow()
		        println("W3C Presentation: $presentation")
		        presentation.presentationVerification(
		            expectedAudience = "verifier2-example",
		            expectedNonce = "cfd1cabf-081e-4e7b-9751-6fbd5722e88e"
		        )
		    }

		    @Test
		    fun testDcSdJwtPresentationParsing1() = runTest {
		        init()
		        val vp =
		            "eyJraWQiOiJkaWQ6andrOmV5SnJkSGtpT2lKUFMxQWlMQ0pqY25ZaU9pSkZaREkxTlRFNUlpd2lhMmxrSWpvaWNqZzJNbE5CUXpocWNUaGtRa2xRVmxVd1dXeFdUMUo1WDA5c1FqRkJNWEJXV1VkWmMwMVJlVE5uY3lJc0luZ2lPaUk1YzNOdmJERmZObGhWYmxwb1ZqZ3hUMjFoY1dKNFMwSjRlRU5PUTBJeGJHRkVlVzUzVFZkR1RXazBJbjAjcjg2MlNBQzhqcThkQklQVlUwWWxWT1J5X09sQjFBMXBWWUdZc01ReTNncyIsInR5cCI6InZjK3NkLWp3dCIsImFsZyI6IkVkRFNBIn0.eyJpZCI6InVybjp1dWlkOmJlMGQ3YzVmLWIxYmYtNDBhZS1iNWQ4LWZjZWY2Y2Y5ZDc0MiIsImlhdCI6MTc1MDM4NzAyOCwibmJmIjoxNzUwMzg3MDI4LCJleHAiOjE3ODE5MjMwMjgsImlzcyI6ImRpZDpqd2s6ZXlKcmRIa2lPaUpQUzFBaUxDSmpjbllpT2lKRlpESTFOVEU1SWl3aWEybGtJam9pY2pnMk1sTkJRemhxY1Roa1FrbFFWbFV3V1d4V1QxSjVYMDlzUWpGQk1YQldXVWRaYzAxUmVUTm5jeUlzSW5naU9pSTVjM052YkRGZk5saFZibHBvVmpneFQyMWhjV0o0UzBKNGVFTk9RMEl4YkdGRWVXNTNUVmRHVFdrMEluMCIsImNuZiI6eyJraWQiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTcifSwidmN0IjoiaHR0cDovL3dhbHRpZC5lbnRlcnByaXNlLmxvY2FsaG9zdDozMDAwL3YxL3dhbHRpZC5pc3N1ZXIvaXNzdWVyLXNlcnZpY2UtYXBpL29wZW5pZDR2Yy9kcmFmdDEzL2lkZW50aXR5X2NyZWRlbnRpYWwiLCJkaXNwbGF5IjpbeyJuYW1lIjoiRXhhbXBsZSBWQyIsImxvY2FsZSI6ImVuIiwibG9nbyI6eyJ1cmwiOiJodHRwczovL2V4YW1wbGUub3JnL2xvZ28ucG5nIiwiYWx0X3RleHQiOiJleGFtcGxlIGxvZ28ifSwiZGVzY3JpcHRpb24iOiJNeSBleGFtcGxlIGNyZWRlbnRpYWwiLCJjdXN0b21QYXJhbWV0ZXJzIjp7ImJhY2tncm91bmRDb2xvciI6IiMwMDAwMDAiLCJ0ZXh0Q29sb3IiOiIjRkZGRkZGIn19XSwiX3NkIjpbIjNQMnJpUVNUSDZLM0g1N1gzNUpfLU44OTFDSWxsb2JicHE2ZlNBOVlvR0EiXX0.oAXWtQm1ws9e_Y2Iyj0QA5gtF84atevQB6bxcWHmIoqxQpRgucsPID2xdASN9WfUbpUwZ1g9ceu_1-4m5xFTBw~WyJiRGR5TFdIYncyLW9aVFptR1BFR3NRIiwibmFtZSIsIkpvaG4iXQ~eyJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJhdWQiOiJ2ZXJpZmllcjItZXhhbXBsZSIsIm5vbmNlIjoiNjdlNjdjNjctYjJlNi00Mjk3LWFjMGYtOWJmMmVlMGI2OGFhIiwiaWF0IjoxNzUwMzg5NDg0LCJzZF9oYXNoIjoiM1AycmlRU1RINkszSDU3WDM1Sl8tTjg5MUNJbGxvYmJwcTZmU0E5WW9HQSJ9.Y5k_syRoJ4XGsMmBmgXTAa4NBXXPCd2nSgLaTAd6pKfru6x22SOJhZOCQMsrvV8p82u0ZMjPz9neLUJp_CO7Zw"
		        val presentation = DcSdJwtPresentation.parse(vp)
		            .getOrThrow()
		        println("DC-SDJWT1 Presentation: $presentation")
		        presentation.presentationVerification(
		            expectedAudience = "verifier2-example",
		            expectedNonce = "67e67c67-b2e6-4297-ac0f-9bf2ee0b68aa",
		            originalClaimsQuery = emptyList()
		        )
		    }

		    @Test
		    fun testDcSdJwtPresentationParsing2() = runTest {
		        init()
		        val vp =
		            "eyJraWQiOiI5dnVhSnlVeFJ4NEttSHlvWjlrakp4TXNfbWpwbm5mLW1QTTluUE1HNTFBIiwidHlwIjoidmMrc2Qtand0IiwiYWxnIjoiRVMyNTYifQ.eyJnaXZlbl9uYW1lIjoiSm9obiIsImZhbWlseV9uYW1lIjoiRG9lIiwiZW1haWwiOiJqb2huZG9lQGV4YW1wbGUuY29tIiwicGhvbmVfbnVtYmVyIjoiKzEtMjAyLTU1NS0wMTAxIiwiYWRkcmVzcyI6eyJzdHJlZXRfYWRkcmVzcyI6IjEyMyBNYWluIFN0IiwibG9jYWxpdHkiOiJBbnl0b3duIiwicmVnaW9uIjoiQW55c3RhdGUiLCJjb3VudHJ5IjoiVVMifSwiaXNfb3Zlcl8xOCI6dHJ1ZSwiaXNfb3Zlcl8yMSI6dHJ1ZSwiaXNfb3Zlcl82NSI6dHJ1ZSwiaWQiOiJ1cm46dXVpZDoyMTc0ZTIxMi0yNTlhLTRjZjUtYmZhZi00YWYzZmY4OTViYTUiLCJpYXQiOjE3NTMxMDgyNDksIm5iZiI6MTc1MzEwODI0OSwiZXhwIjoxNzg0NjQ0MjQ5LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjcwMDIvZHJhZnQxMyIsImNuZiI6eyJraWQiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTcifSwidmN0IjoiaHR0cDovL2xvY2FsaG9zdDo3MDAyL2RyYWZ0MTMvaWRlbnRpdHlfY3JlZGVudGlhbCIsImRpc3BsYXkiOltdLCJfc2QiOlsiVWlCcHFfZ3NXRXpZSnVGemxSSW54Vktabm1yRmVFa0Jqa2hHNUhfaVNYMCJdfQ.d7yYSPafbESJwz7kFMzFPuzytW_zwI-QWnbD1hGhbiPmD8B9R1PuWanTuRKwnEItGzopmHbP6ITH_bsy1vslxA~~eyJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJhdWQiOiJ2ZXJpZmllcjItZXhhbXBsZSIsIm5vbmNlIjoiMjYwMjdmMTUtMjg2Mi00ZTNkLWFhZGYtNjQ1YTMwODg1OGQxIiwiaWF0IjoxNzUzMTcxMjk1LCJzZF9oYXNoIjoiNDdERVFwajhIQlNhLV9USW1XLTVKQ2V1UWVSa201Tk1wSldaRzNoU3VGVSJ9.Kd-OTFxHrlhsbjx3N7XWQtHKL8dXrSjOoUEobgHSMY680nOgekE7nQY04HSSmhHqdCYdbxLgHr6l1bFzzVWqkQ"
		        val presentation = DcSdJwtPresentation.parse(vp)
		            .getOrThrow()
		        println("DC-SDJWT2 Presentation: $presentation")
		        presentation.presentationVerification(
		            expectedAudience = "verifier2-example",
		            expectedNonce = "26027f15-2862-4e3d-aadf-645a308858d1",
		            originalClaimsQuery = emptyList()
		        )
		    }


		    @Test
		    fun testValidationFailureInvalidSignature() = runTest {
		        init()
		        val jwtVp1 =
		            "eyJraWQiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTcjekRuYWVZYjdEYWtRV21Za3JMa21zVkVSQWF6RjVZYTFHNW54YlNuUWNMSlo4Q3IxNyIsInR5cCI6IkpXVCIsImFsZyI6IkVTMjU2IiwgIngiOiAieSJ9.eyJzdWIiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTciLCJuYmYiOjE3NTM5MTg2ODYsImlhdCI6MTc1MzkxODc0NiwianRpIjoidXJuOnV1aWQ6NDc5NjEwYzctMmRkNC00YjJhLTg0MjEtODJhMWMwOGNkYmU0IiwiaXNzIjoiZGlkOmtleTp6RG5hZVliN0Rha1FXbVlrckxrbXNWRVJBYXpGNVlhMUc1bnhiU25RY0xKWjhDcjE3Iiwibm9uY2UiOiJjZmQxY2FiZi0wODFlLTRlN2ItOTc1MS02ZmJkNTcyMmU4OGUiLCJhdWQiOiJ2ZXJpZmllcjItZXhhbXBsZSIsInZwIjp7IkBjb250ZXh0IjpbImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZVByZXNlbnRhdGlvbiJdLCJpZCI6InVybjp1dWlkOjQ3OTYxMGM3LTJkZDQtNGIyYS04NDIxLTgyYTFjMDhjZGJlNCIsImhvbGRlciI6ImRpZDprZXk6ekRuYWVZYjdEYWtRV21Za3JMa21zVkVSQWF6RjVZYTFHNW54YlNuUWNMSlo4Q3IxNyIsImNuZiI6bnVsbCwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKcmFXUWlPaUprYVdRNmEyVjVPbm8yVFd0cWIxSm9jVEZxVTA1S1pFeHBjblZUV0hKR1JuaGhaM0Z5ZW5SYVlWaEljVWhIVlZSTFNtSmpUbmwzY0NONk5rMXJhbTlTYUhFeGFsTk9TbVJNYVhKMVUxaHlSa1o0WVdkeGNucDBXbUZZU0hGSVIxVlVTMHBpWTA1NWQzQWlMQ0owZVhBaU9pSktWMVFpTENKaGJHY2lPaUpGWkVSVFFTSjkuZXlKcGMzTWlPaUprYVdRNmEyVjVPbm8yVFd0cWIxSm9jVEZxVTA1S1pFeHBjblZUV0hKR1JuaGhaM0Z5ZW5SYVlWaEljVWhIVlZSTFNtSmpUbmwzY0NJc0luTjFZaUk2SW1ScFpEcHJaWGs2ZWtSdVlXVlpZamRFWVd0UlYyMVphM0pNYTIxelZrVlNRV0Y2UmpWWllURkhOVzU0WWxOdVVXTk1TbG80UTNJeE55SXNJblpqSWpwN0lrQmpiMjUwWlhoMElqcGJJbWgwZEhCek9pOHZkM2QzTG5jekxtOXlaeTh5TURFNEwyTnlaV1JsYm5ScFlXeHpMM1l4SWl3aWFIUjBjSE02THk5d2RYSnNMbWx0YzJkc2IySmhiQzV2Y21jdmMzQmxZeTl2WWk5Mk0zQXdMMk52Ym5SbGVIUXVhbk52YmlKZExDSnBaQ0k2SW5WeWJqcDFkV2xrT21WaFpXSTRaR1U1TFdVeE5EQXROR1prTXkwNE1tTmtMVEk1WkdZek4yTm1NVGRsWXlJc0luUjVjR1VpT2xzaVZtVnlhV1pwWVdKc1pVTnlaV1JsYm5ScFlXd2lMQ0pQY0dWdVFtRmtaMlZEY21Wa1pXNTBhV0ZzSWwwc0ltNWhiV1VpT2lKS1JrWWdlQ0IyWXkxbFpIVWdVR3gxWjBabGMzUWdNeUJKYm5SbGNtOXdaWEpoWW1sc2FYUjVJaXdpYVhOemRXVnlJanA3SW5SNWNHVWlPbHNpVUhKdlptbHNaU0pkTENKdVlXMWxJam9pU205aWN5Qm1iM0lnZEdobElFWjFkSFZ5WlNBb1NrWkdLU0lzSW5WeWJDSTZJbWgwZEhCek9pOHZkM2QzTG1wbVppNXZjbWN2SWl3aWFXMWhaMlVpT2lKb2RIUndjem92TDNjell5MWpZMmN1WjJsMGFIVmlMbWx2TDNaakxXVmtMM0JzZFdkbVpYTjBMVEV0TWpBeU1pOXBiV0ZuWlhNdlNrWkdYMHh2WjI5TWIyTnJkWEF1Y0c1bklpd2lhV1FpT2lKa2FXUTZhMlY1T25vMlRXdHFiMUpvY1RGcVUwNUtaRXhwY25WVFdISkdSbmhoWjNGeWVuUmFZVmhJY1VoSFZWUkxTbUpqVG5sM2NDSjlMQ0pqY21Wa1pXNTBhV0ZzVTNWaWFtVmpkQ0k2ZXlKMGVYQmxJanBiSWtGamFHbGxkbVZ0Wlc1MFUzVmlhbVZqZENKZExDSmhZMmhwWlhabGJXVnVkQ0k2ZXlKcFpDSTZJblZ5YmpwMWRXbGtPbUZqTWpVMFltUTFMVGhtWVdRdE5HSmlNUzA1WkRJNUxXVm1aRGt6T0RVek5qa3lOaUlzSW5SNWNHVWlPbHNpUVdOb2FXVjJaVzFsYm5RaVhTd2libUZ0WlNJNklrcEdSaUI0SUhaakxXVmtkU0JRYkhWblJtVnpkQ0F6SUVsdWRHVnliM0JsY21GaWFXeHBkSGtpTENKa1pYTmpjbWx3ZEdsdmJpSTZJbFJvYVhNZ2QyRnNiR1YwSUhOMWNIQnZjblJ6SUhSb1pTQjFjMlVnYjJZZ1Z6TkRJRlpsY21sbWFXRmliR1VnUTNKbFpHVnVkR2xoYkhNZ1lXNWtJR2hoY3lCa1pXMXZibk4wY21GMFpXUWdhVzUwWlhKdmNHVnlZV0pwYkdsMGVTQmtkWEpwYm1jZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCeVpYRjFaWE4wSUhkdmNtdG1iRzkzSUdSMWNtbHVaeUJLUmtZZ2VDQldReTFGUkZVZ1VHeDFaMFpsYzNRZ015NGlMQ0pqY21sMFpYSnBZU0k2ZXlKMGVYQmxJam9pUTNKcGRHVnlhV0VpTENKdVlYSnlZWFJwZG1VaU9pSlhZV3hzWlhRZ2MyOXNkWFJwYjI1eklIQnliM1pwWkdWeWN5QmxZWEp1WldRZ2RHaHBjeUJpWVdSblpTQmllU0JrWlcxdmJuTjBjbUYwYVc1bklHbHVkR1Z5YjNCbGNtRmlhV3hwZEhrZ1pIVnlhVzVuSUhSb1pTQndjbVZ6Wlc1MFlYUnBiMjRnY21WeGRXVnpkQ0IzYjNKclpteHZkeTRnVkdocGN5QnBibU5zZFdSbGN5QnpkV05qWlhOelpuVnNiSGtnY21WalpXbDJhVzVuSUdFZ2NISmxjMlZ1ZEdGMGFXOXVJSEpsY1hWbGMzUXNJR0ZzYkc5M2FXNW5JSFJvWlNCb2IyeGtaWElnZEc4Z2MyVnNaV04wSUdGMElHeGxZWE4wSUhSM2J5QjBlWEJsY3lCdlppQjJaWEpwWm1saFlteGxJR055WldSbGJuUnBZV3h6SUhSdklHTnlaV0YwWlNCaElIWmxjbWxtYVdGaWJHVWdjSEpsYzJWdWRHRjBhVzl1TENCeVpYUjFjbTVwYm1jZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCMGJ5QjBhR1VnY21WeGRXVnpkRzl5TENCaGJtUWdjR0Z6YzJsdVp5QjJaWEpwWm1sallYUnBiMjRnYjJZZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCaGJtUWdkR2hsSUdsdVkyeDFaR1ZrSUdOeVpXUmxiblJwWVd4ekxpSjlMQ0pwYldGblpTSTZleUpwWkNJNkltaDBkSEJ6T2k4dmR6TmpMV05qWnk1bmFYUm9kV0l1YVc4dmRtTXRaV1F2Y0d4MVoyWmxjM1F0TXkweU1ESXpMMmx0WVdkbGN5OUtSa1l0VmtNdFJVUlZMVkJNVlVkR1JWTlVNeTFpWVdSblpTMXBiV0ZuWlM1d2JtY2lMQ0owZVhCbElqb2lTVzFoWjJVaWZYMHNJbWxrSWpvaVpHbGtPbXRsZVRwNlJHNWhaVmxpTjBSaGExRlhiVmxyY2t4cmJYTldSVkpCWVhwR05WbGhNVWMxYm5oaVUyNVJZMHhLV2poRGNqRTNJbjBzSW1semMzVmhibU5sUkdGMFpTSTZJakl3TWpVdE1EY3RNekJVTWpNNk16azZNREl1T1RJeE1EQXlNVGN5V2lJc0ltVjRjR2x5WVhScGIyNUVZWFJsSWpvaU1qQXlOaTB3Tnkwek1GUXlNem96T1Rvd01pNDVNakV3T1RVeU56TmFJbjBzSW1wMGFTSTZJblZ5YmpwMWRXbGtPbVZoWldJNFpHVTVMV1V4TkRBdE5HWmtNeTA0TW1Oa0xUSTVaR1l6TjJObU1UZGxZeUlzSW1WNGNDSTZNVGM0TlRRMU5EYzBNaXdpYVdGMElqb3hOelV6T1RFNE56UXlMQ0p1WW1ZaU9qRTNOVE01TVRnM05ESjkuOWJiRGl1My1xM25xYl9JVXRFWlVuaENLdlpfYUs0QjBuaGNBUnpsb0FQU2NNM25kZUhWYTV2cG9kbEd1Z0lWUXB6TzFPSGlEcGN3dVZzT0JPakNrQlEiXX19.Od6DX18rTycJQxsdgozwgN3NVXUkti-e_OpJig75Kn18VOKaFl98y5KnPE3KIa5rFfmU_fyzWKzkPtvP9oQqBw"
		        val presentation = JwtVcJsonPresentation.parse(jwtVp1)
		            .getOrThrow()
		        println("W3C Presentation: $presentation")

		        val result = runCatching {
		            presentation.presentationVerification(
		                expectedAudience = "verifier2-example",
		                expectedNonce = "cfd1cabf-081e-4e7b-9751-6fbd5722e88e"
		            )
		        }
		        check(result.isFailure) { "Should have failed validation" }
		        println("Expecting failure. Is failure = ${result.isFailure}. Exception = ${result.exceptionOrNull()}")
		    }

		    @Test
		    fun testValidationFailureInvalidNonce() = runTest {
		        init()
		        val vp =
		            "eyJraWQiOiI5dnVhSnlVeFJ4NEttSHlvWjlrakp4TXNfbWpwbm5mLW1QTTluUE1HNTFBIiwidHlwIjoidmMrc2Qtand0IiwiYWxnIjoiRVMyNTYifQ.eyJnaXZlbl9uYW1lIjoiSm9obiIsImZhbWlseV9uYW1lIjoiRG9lIiwiZW1haWwiOiJqb2huZG9lQGV4YW1wbGUuY29tIiwicGhvbmVfbnVtYmVyIjoiKzEtMjAyLTU1NS0wMTAxIiwiYWRkcmVzcyI6eyJzdHJlZXRfYWRkcmVzcyI6IjEyMyBNYWluIFN0IiwibG9jYWxpdHkiOiJBbnl0b3duIiwicmVnaW9uIjoiQW55c3RhdGUiLCJjb3VudHJ5IjoiVVMifSwiaXNfb3Zlcl8xOCI6dHJ1ZSwiaXNfb3Zlcl8yMSI6dHJ1ZSwiaXNfb3Zlcl82NSI6dHJ1ZSwiaWQiOiJ1cm46dXVpZDoyMTc0ZTIxMi0yNTlhLTRjZjUtYmZhZi00YWYzZmY4OTViYTUiLCJpYXQiOjE3NTMxMDgyNDksIm5iZiI6MTc1MzEwODI0OSwiZXhwIjoxNzg0NjQ0MjQ5LCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjcwMDIvZHJhZnQxMyIsImNuZiI6eyJraWQiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTcifSwidmN0IjoiaHR0cDovL2xvY2FsaG9zdDo3MDAyL2RyYWZ0MTMvaWRlbnRpdHlfY3JlZGVudGlhbCIsImRpc3BsYXkiOltdLCJfc2QiOlsiVWlCcHFfZ3NXRXpZSnVGemxSSW54Vktabm1yRmVFa0Jqa2hHNUhfaVNYMCJdfQ.d7yYSPafbESJwz7kFMzFPuzytW_zwI-QWnbD1hGhbiPmD8B9R1PuWanTuRKwnEItGzopmHbP6ITH_bsy1vslxA~~eyJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJhdWQiOiJ2ZXJpZmllcjItZXhhbXBsZSIsIm5vbmNlIjoiMjYwMjdmMTUtMjg2Mi00ZTNkLWFhZGYtNjQ1YTMwODg1OGQxIiwiaWF0IjoxNzUzMTcxMjk1LCJzZF9oYXNoIjoiNDdERVFwajhIQlNhLV9USW1XLTVKQ2V1UWVSa201Tk1wSldaRzNoU3VGVSJ9.Kd-OTFxHrlhsbjx3N7XWQtHKL8dXrSjOoUEobgHSMY680nOgekE7nQY04HSSmhHqdCYdbxLgHr6l1bFzzVWqkQ"
		        val presentation = DcSdJwtPresentation.parse(vp)
		            .getOrThrow()
		        println("DC-SDJWT2 Presentation: $presentation")

		        val result = runCatching {
		            presentation.presentationVerification(
		                expectedAudience = "verifier2-example",
		                expectedNonce = "abc",
		                originalClaimsQuery = emptyList()
		            )
		        }
		        check(result.isFailure) { "Should have failed validation" }
		        println("Expecting failure. Is failure = ${result.isFailure}. Exception = ${result.exceptionOrNull()}")

		    }


}
