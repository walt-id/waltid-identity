package id.walt.credentials

		import id.walt.credentials.presentations.formats.DcSdJwtPresentation
		import id.walt.credentials.presentations.formats.JwtVcJsonPresentation
		import id.walt.did.helpers.WaltidServices
		import kotlinx.coroutines.test.runTest
		import kotlin.test.Test

		class PresentationTest {

		    companion object {
		        var hasInit = false

		        suspend fun init() {
		            hasInit = true
		            WaltidServices.minimalInit()
		        }
		    }

		    @Test
		    fun testJwtVcPresentationParsing() = runTest {
		        init()
		        val jwtVp1 =
		            "eyJraWQiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTcjekRuYWVZYjdEYWtRV21Za3JMa21zVkVSQWF6RjVZYTFHNW54YlNuUWNMSlo4Q3IxNyIsInR5cCI6IkpXVCIsImFsZyI6IkVTMjU2In0.eyJzdWIiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTciLCJuYmYiOjE3NTM5MTg2ODYsImlhdCI6MTc1MzkxODc0NiwianRpIjoidXJuOnV1aWQ6NDc5NjEwYzctMmRkNC00YjJhLTg0MjEtODJhMWMwOGNkYmU0IiwiaXNzIjoiZGlkOmtleTp6RG5hZVliN0Rha1FXbVlrckxrbXNWRVJBYXpGNVlhMUc1bnhiU25RY0xKWjhDcjE3Iiwibm9uY2UiOiJjZmQxY2FiZi0wODFlLTRlN2ItOTc1MS02ZmJkNTcyMmU4OGUiLCJhdWQiOiJ2ZXJpZmllcjItZXhhbXBsZSIsInZwIjp7IkBjb250ZXh0IjpbImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZVByZXNlbnRhdGlvbiJdLCJpZCI6InVybjp1dWlkOjQ3OTYxMGM3LTJkZDQtNGIyYS04NDIxLTgyYTFjMDhjZGJlNCIsImhvbGRlciI6ImRpZDprZXk6ekRuYWVZYjdEYWtRV21Za3JMa21zVkVSQWF6RjVZYTFHNW54YlNuUWNMSlo4Q3IxNyIsImNuZiI6bnVsbCwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKcmFXUWlPaUprYVdRNmEyVjVPbm8yVFd0cWIxSm9jVEZxVTA1S1pFeHBjblZUV0hKR1JuaGhaM0Z5ZW5SYVlWaEljVWhIVlZSTFNtSmpUbmwzY0NONk5rMXJhbTlTYUhFeGFsTk9TbVJNYVhKMVUxaHlSa1o0WVdkeGNucDBXbUZZU0hGSVIxVlVTMHBpWTA1NWQzQWlMQ0owZVhBaU9pSktWMVFpTENKaGJHY2lPaUpGWkVSVFFTSjkuZXlKcGMzTWlPaUprYVdRNmEyVjVPbm8yVFd0cWIxSm9jVEZxVTA1S1pFeHBjblZUV0hKR1JuaGhaM0Z5ZW5SYVlWaEljVWhIVlZSTFNtSmpUbmwzY0NJc0luTjFZaUk2SW1ScFpEcHJaWGs2ZWtSdVlXVlpZamRFWVd0UlYyMVphM0pNYTIxelZrVlNRV0Y2UmpWWllURkhOVzU0WWxOdVVXTk1TbG80UTNJeE55SXNJblpqSWpwN0lrQmpiMjUwWlhoMElqcGJJbWgwZEhCek9pOHZkM2QzTG5jekxtOXlaeTh5TURFNEwyTnlaV1JsYm5ScFlXeHpMM1l4SWl3aWFIUjBjSE02THk5d2RYSnNMbWx0YzJkc2IySmhiQzV2Y21jdmMzQmxZeTl2WWk5Mk0zQXdMMk52Ym5SbGVIUXVhbk52YmlKZExDSnBaQ0k2SW5WeWJqcDFkV2xrT21WaFpXSTRaR1U1TFdVeE5EQXROR1prTXkwNE1tTmtMVEk1WkdZek4yTm1NVGRsWXlJc0luUjVjR1VpT2xzaVZtVnlhV1pwWVdKc1pVTnlaV1JsYm5ScFlXd2lMQ0pQY0dWdVFtRmtaMlZEY21Wa1pXNTBhV0ZzSWwwc0ltNWhiV1VpT2lKS1JrWWdlQ0IyWXkxbFpIVWdVR3gxWjBabGMzUWdNeUJKYm5SbGNtOXdaWEpoWW1sc2FYUjVJaXdpYVhOemRXVnlJanA3SW5SNWNHVWlPbHNpVUhKdlptbHNaU0pkTENKdVlXMWxJam9pU205aWN5Qm1iM0lnZEdobElFWjFkSFZ5WlNBb1NrWkdLU0lzSW5WeWJDSTZJbWgwZEhCek9pOHZkM2QzTG1wbVppNXZjbWN2SWl3aWFXMWhaMlVpT2lKb2RIUndjem92TDNjell5MWpZMmN1WjJsMGFIVmlMbWx2TDNaakxXVmtMM0JzZFdkbVpYTjBMVEV0TWpBeU1pOXBiV0ZuWlhNdlNrWkdYMHh2WjI5TWIyTnJkWEF1Y0c1bklpd2lhV1FpT2lKa2FXUTZhMlY1T25vMlRXdHFiMUpvY1RGcVUwNUtaRXhwY25WVFdISkdSbmhoWjNGeWVuUmFZVmhJY1VoSFZWUkxTbUpqVG5sM2NDSjlMQ0pqY21Wa1pXNTBhV0ZzVTNWaWFtVmpkQ0k2ZXlKMGVYQmxJanBiSWtGamFHbGxkbVZ0Wlc1MFUzVmlhbVZqZENKZExDSmhZMmhwWlhabGJXVnVkQ0k2ZXlKcFpDSTZJblZ5YmpwMWRXbGtPbUZqTWpVMFltUTFMVGhtWVdRdE5HSmlNUzA1WkRJNUxXVm1aRGt6T0RVek5qa3lOaUlzSW5SNWNHVWlPbHNpUVdOb2FXVjJaVzFsYm5RaVhTd2libUZ0WlNJNklrcEdSaUI0SUhaakxXVmtkU0JRYkhWblJtVnpkQ0F6SUVsdWRHVnliM0JsY21GaWFXeHBkSGtpTENKa1pYTmpjbWx3ZEdsdmJpSTZJbFJvYVhNZ2QyRnNiR1YwSUhOMWNIQnZjblJ6SUhSb1pTQjFjMlVnYjJZZ1Z6TkRJRlpsY21sbWFXRmliR1VnUTNKbFpHVnVkR2xoYkhNZ1lXNWtJR2hoY3lCa1pXMXZibk4wY21GMFpXUWdhVzUwWlhKdmNHVnlZV0pwYkdsMGVTQmtkWEpwYm1jZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCeVpYRjFaWE4wSUhkdmNtdG1iRzkzSUdSMWNtbHVaeUJLUmtZZ2VDQldReTFGUkZVZ1VHeDFaMFpsYzNRZ015NGlMQ0pqY21sMFpYSnBZU0k2ZXlKMGVYQmxJam9pUTNKcGRHVnlhV0VpTENKdVlYSnlZWFJwZG1VaU9pSlhZV3hzWlhRZ2MyOXNkWFJwYjI1eklIQnliM1pwWkdWeWN5QmxZWEp1WldRZ2RHaHBjeUJpWVdSblpTQmllU0JrWlcxdmJuTjBjbUYwYVc1bklHbHVkR1Z5YjNCbGNtRmlhV3hwZEhrZ1pIVnlhVzVuSUhSb1pTQndjbVZ6Wlc1MFlYUnBiMjRnY21WeGRXVnpkQ0IzYjNKclpteHZkeTRnVkdocGN5QnBibU5zZFdSbGN5QnpkV05qWlhOelpuVnNiSGtnY21WalpXbDJhVzVuSUdFZ2NISmxjMlZ1ZEdGMGFXOXVJSEpsY1hWbGMzUXNJR0ZzYkc5M2FXNW5JSFJvWlNCb2IyeGtaWElnZEc4Z2MyVnNaV04wSUdGMElHeGxZWE4wSUhSM2J5QjBlWEJsY3lCdlppQjJaWEpwWm1saFlteGxJR055WldSbGJuUnBZV3h6SUhSdklHTnlaV0YwWlNCaElIWmxjbWxtYVdGaWJHVWdjSEpsYzJWdWRHRjBhVzl1TENCeVpYUjFjbTVwYm1jZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCMGJ5QjBhR1VnY21WeGRXVnpkRzl5TENCaGJtUWdjR0Z6YzJsdVp5QjJaWEpwWm1sallYUnBiMjRnYjJZZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCaGJtUWdkR2hsSUdsdVkyeDFaR1ZrSUdOeVpXUmxiblJwWVd4ekxpSjlMQ0pwYldGblpTSTZleUpwWkNJNkltaDBkSEJ6T2k4dmR6TmpMV05qWnk1bmFYUm9kV0l1YVc4dmRtTXRaV1F2Y0d4MVoyWmxjM1F0TXkweU1ESXpMMmx0WVdkbGN5OUtSa1l0VmtNdFJVUlZMVkJNVlVkR1JWTlVNeTFpWVdSblpTMXBiV0ZuWlM1d2JtY2lMQ0owZVhCbElqb2lTVzFoWjJVaWZYMHNJbWxrSWpvaVpHbGtPbXRsZVRwNlJHNWhaVmxpTjBSaGExRlhiVmxyY2t4cmJYTldSVkpCWVhwR05WbGhNVWMxYm5oaVUyNVJZMHhLV2poRGNqRTNJbjBzSW1semMzVmhibU5sUkdGMFpTSTZJakl3TWpVdE1EY3RNekJVTWpNNk16azZNREl1T1RJeE1EQXlNVGN5V2lJc0ltVjRjR2x5WVhScGIyNUVZWFJsSWpvaU1qQXlOaTB3Tnkwek1GUXlNem96T1Rvd01pNDVNakV3T1RVeU56TmFJbjBzSW1wMGFTSTZJblZ5YmpwMWRXbGtPbVZoWldJNFpHVTVMV1V4TkRBdE5HWmtNeTA0TW1Oa0xUSTVaR1l6TjJObU1UZGxZeUlzSW1WNGNDSTZNVGM0TlRRMU5EYzBNaXdpYVdGMElqb3hOelV6T1RFNE56UXlMQ0p1WW1ZaU9qRTNOVE01TVRnM05ESjkuOWJiRGl1My1xM25xYl9JVXRFWlVuaENLdlpfYUs0QjBuaGNBUnpsb0FQU2NNM25kZUhWYTV2cG9kbEd1Z0lWUXB6TzFPSGlEcGN3dVZzT0JPakNrQlEiXX19.Od6DX18rTycJQxsdgozwgN3NVXUkti-e_OpJig75Kn18VOKaFl98y5KnPE3KIa5rFfmU_fyzWKzkPtvP9oQqBw"
		        val presentation = JwtVcJsonPresentation.parse(jwtVp1)
		            .getOrThrow()
		        println("W3C Presentation: $presentation")
		        presentation.presentationVerification(
		            expectedAudience = "verifier2-example",
		            expectedNonce = "cfd1cabf-081e-4e7b-9751-6fbd5722e88e"
		        )
		    }

		    @Test
		    fun testDcSdJwtPresentationParsingComplianceService() = runTest {
		        init()
		        val vp =
		            "eyJ4NWMiOlsiTUlJQ0NUQ0NBYkNnQXdJQkFnSVVmcXlpQXJKWm9YN002MS80NzNVQVZpMi9VcGd3Q2dZSUtvWkl6ajBFQXdJd0tERUxNQWtHQTFVRUJoTUNRVlF4R1RBWEJnTlZCQU1NRUZkaGJIUnBaQ0JVWlhOMElFbEJRMEV3SGhjTk1qVXdOakF5TURZME1URXpXaGNOTWpZd09UQXlNRFkwTVRFeldqQXpNUXN3Q1FZRFZRUUdFd0pCVkRFa01DSUdBMVVFQXd3YlYyRnNkR2xrSUZSbGMzUWdSRzlqZFcxbGJuUWdVMmxuYm1WeU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVB6cDZlVlNBZFhFUnFBcDhxOE91REVobDJJTEdBYW9hUVhUSjJzRDJnNVhwM0NGUURNck1wUi9TUTBqdC9qVE9xRXhrMVBSempRNzlhS3BJc0pNMW1xT0JyRENCcVRBZkJnTlZIU01FR0RBV2dCVHhDbjJuV01yRTcwcVhiNjE0VTE0QndlWTJhekFkQmdOVkhRNEVGZ1FVeDVxa09MQzRscGwxeHBZWkdtRjlITHh0cDBnd0RnWURWUjBQQVFIL0JBUURBZ2VBTUJvR0ExVWRFZ1FUTUJHR0QyaDBkSEJ6T2k4dmQyRnNkQzVwWkRBVkJnTlZIU1VCQWY4RUN6QUpCZ2NvZ1l4ZEJRRUNNQ1FHQTFVZEh3UWRNQnN3R2FBWG9CV0dFMmgwZEhCek9pOHZkMkZzZEM1cFpDOWpjbXd3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnSFRhcDNjNnlDVU5oRFZmWldCUE1LajlkQ1daYnJNRTAza2g5TkpUYncxRUNJQXZWdnVHbGw5TzIxZVIxNlNrSkhIQUExcFBjb3ZoY1R2RjlmejljYzY2TSJdLCJ0eXAiOiJkYytzZC1qd3QiLCJhbGciOiJFUzI1NiJ9.eyJfc2QiOlsiMFlvVXQxVXNjc24xLTEzQWI3dTkzSDJCdGI1aGNiZks4OXFXMGlETTdWTSIsIkwtUHZWYlNNbWVtQngyZFY0b0UzcEEyUXhCNVg3dU0tb2dGWFU0T1hYNmciLCJPSTZmMnQzT2RuZ04tQ1IwNXJzcENfUWZqZEVJWG13TkR5LVNBUlNjTHZVIiwiUXBla1hnYmowSm92UldEc2J5Wm0ySVpPQzRnM3o1aGRISXY4aWd3NkNSRSIsImFXSGhleEtiVEdodXVWb0RoMnhrSkdYdWttTHJ0UmtNV3A1ZnJqM1BKSkEiLCJ3enJsVmNGb3RCd1hvNFdGSlhhaVNYOHd6ckpvbXRzNFRmUG9TcTdTOW1NIiwieGwzMTVTam5WcGRhZlVKbFQtRXowVkt5aHpnX0s5WTVJY2RSdzlhWnBiRSJdLCJ2Y3QiOiJ1cm46ZXVkaTpwaWQ6MSIsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0LmVtb2JpeC5jby51azo4NDQzL3Rlc3QvMlVRejBIRUxnYXFBOWhoIiwiY25mIjp7Imp3ayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6ImUxaWZnNnlPUnpvbUtncEE5ZmhFY2xmTE9EX1l5aTdHWUVHRjVEc2dleXMiLCJ5IjoiWmNnWXBrbi1IVHNfZDJ0Q3dSeUE2T0lsN29STE1GTGtVOU92d2tkMmRfOCJ9fSwiZXhwIjoxNzYyMTQ3NjE0LCJpYXQiOjE3NjA5MzgwMTQsImFnZV9lcXVhbF9vcl9vdmVyIjp7Il9zZCI6WyItbHZ5MHlWQUxSUGUyMGk0UVZoaWlrUFZNdmlBUzJIMVl6VTJOMHpVcVVjIiwiN0hZR05qb2Jtd09YV01sRXBnSkZlN0loTnlPQV9jWWI3emdRdEZ3WmlsbyIsIkxaSTJnM3FRZWJTSE1Dajh2OEdxWUlyRDNERFdjWEhLcV9hazVJN0FpQU0iLCJtempqQjd1Z3FfSlJNTHZrcTFMZndlUmczZXlISURRVS1iNnFlNVZwcy04IiwieWtfN01WRGNaS2dBRE1FUloxZ2Rua2tGQmlYU29weTd3UmJKSGJnMk1pdyJdfX0.yOiR_tahOyeu8FNq_X0XMyCgtZ8JnXQ1w1_9YksCeV_ebRJGoWGd6dZxPFftO4ZUDkDfGqx_bt2IvXs7uKFqMA~WyJTQTVfTUhvZkJFclNWbWl6S245VktnIiwiZ2l2ZW5fbmFtZSIsIkplYW4iXQ~WyJHS3JLMGlWNXA5djNJWURTYnVUN21RIiwiZmFtaWx5X25hbWUiLCJEdXBvbnQiXQ~WyJSTm9pYVF0RmZGQTFaRDZPXy1sbzhnIiwiYmlydGhkYXRlIiwiMTk4MC0wNS0yMyJd~WyJRYW9zRHRreXRxazJvbHZuSFBjVFdBIiwiYWdlX2luX3llYXJzIiwiNDQiXQ~WyJsTXZ6MVBkN1lrZE5xYnFjeDJxbDV3IiwiMjEiLHRydWVd~WyI5a0Z5bGdXXzB0b01OVUZNREQ3S3ZnIiwiNjUiLGZhbHNlXQ~eyJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJzZF9oYXNoIjoiZ0NMeHF5ZXdpRE0wRzhCdEVTWjJFNzk1aTA4U1pIUjFTZUotSXNDeHZ1MCIsImF1ZCI6Ing1MDlfc2FuX2Ruczp0ZXN0MTIzIiwiaWF0IjoxNzYwOTM4MDE0LCJub25jZSI6IjNjMDRjNWZjLTkzMDYtNDBmYS1iNTQ0LTBlMDA0NzRhY2UwOSJ9.W07BdEyH_TMXxhdPzYwPaitcZ9SYxapQt8Q082UwyVxb8V4u1cIcJQ0tdAfhEaYk0--ymThiGsHuUwvjAH5xiw"
		        val presentation = DcSdJwtPresentation.parse(vp)
		            .getOrThrow()
		        println("DC-SDJWT1 Presentation: $presentation")
		        presentation.presentationVerification(
		            expectedAudience = "x509_san_dns:test123",
		            expectedNonce = "3c04c5fc-9306-40fa-b544-0e00474ace09",
		            originalClaimsQuery = emptyList()
		        )
		    }

		    @Test
		    fun testValidationFailureInvalidSignature() = runTest {
		        init()
		        val jwtVp1 =
		            "eyJraWQiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTcjekRuYWVZYjdEYWtRV21Za3JMa21zVkVSQWF6RjVZYTFHNW54YlNuUWNMSlo4Q3IxNyIsInR5cCI6IkpXVCIsImFsZyI6IkVTMjU2IiwgIngiOiAieSJ9.eyJzdWIiOiJkaWQ6a2V5OnpEbmFlWWI3RGFrUVdtWWtyTGttc1ZFUkFhekY1WWExRzVueGJTblFjTEpaOENyMTciLCJuYmYiOjE3NTM5MTg2ODYsImlhdCI6MTc1MzkxODc0NiwianRpIjoidXJuOnV1aWQ6NDc5NjEwYzctMmRkNC00YjJhLTg0MjEtODJhMWMwOGNkYmU0IiwiaXNzIjoiZGlkOmtleTp6RG5hZVliN0Rha1FXbVlrckxrbXNWRVJBYXpGNVlhMUc1bnhiU25RY0xKWjhDcjE3Iiwibm9uY2UiOiJjZmQxY2FiZi0wODFlLTRlN2ItOTc1MS02ZmJkNTcyMmU4OGUiLCJhdWQiOiJ2ZXJpZmllcjItZXhhbXBsZSIsInZwIjp7IkBjb250ZXh0IjpbImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL3YxIl0sInR5cGUiOlsiVmVyaWZpYWJsZVByZXNlbnRhdGlvbiJdLCJpZCI6InVybjp1dWlkOjQ3OTYxMGM3LTJkZDQtNGIyYS04NDIxLTgyYTFjMDhjZGJlNCIsImhvbGRlciI6ImRpZDprZXk6ekRuYWVZYjdEYWtRV21Za3JMa21zVkVSQWF6RjVZYTFHNW54YlNuUWNMSlo4Q3IxNyIsImNuZiI6bnVsbCwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKcmFXUWlPaUprYVdRNmEyVjVPbm8yVFd0cWIxSm9jVEZxVTA1S1pFeHBjblZUV0hKR1JuaGhaM0Z5ZW5SYVlWaEljVWhIVlZSTFNtSmpUbmwzY0NONk5rMXJhbTlTYUhFeGFsTk9TbVJNYVhKMVUxaHlSa1o0WVdkeGNucDBXbUZZU0hGSVIxVlVTMHBpWTA1NWQzQWlMQ0owZVhBaU9pSktWMVFpTENKaGJHY2lPaUpGWkVSVFFTSjkuZXlKcGMzTWlPaUprYVdRNmEyVjVPbm8yVFd0cWIxSm9jVEZxVTA1S1pFeHBjblZUV0hKR1JuaGhaM0Z5ZW5SYVlWaEljVWhIVlZSTFNtSmpUbmwzY0NJc0luTjFZaUk2SW1ScFpEcHJaWGs2ZWtSdVlXVlpZamRFWVd0UlYyMVphM0pNYTIxelZrVlNRV0Y2UmpWWllURkhOVzU0WWxOdVVXTk1TbG80UTNJeE55SXNJblpqSWpwN0lrQmpiMjUwWlhoMElqcGJJbWgwZEhCek9pOHZkM2QzTG5jekxtOXlaeTh5TURFNEwyTnlaV1JsYm5ScFlXeHpMM1l4SWl3aWFIUjBjSE02THk5d2RYSnNMbWx0YzJkc2IySmhiQzV2Y21jdmMzQmxZeTl2WWk5Mk0zQXdMMk52Ym5SbGVIUXVhbk52YmlKZExDSnBaQ0k2SW5WeWJqcDFkV2xrT21WaFpXSTRaR1U1TFdVeE5EQXROR1prTXkwNE1tTmtMVEk1WkdZek4yTm1NVGRsWXlJc0luUjVjR1VpT2xzaVZtVnlhV1pwWVdKc1pVTnlaV1JsYm5ScFlXd2lMQ0pQY0dWdVFtRmtaMlZEY21Wa1pXNTBhV0ZzSWwwc0ltNWhiV1VpT2lKS1JrWWdlQ0IyWXkxbFpIVWdVR3gxWjBabGMzUWdNeUJKYm5SbGNtOXdaWEpoWW1sc2FYUjVJaXdpYVhOemRXVnlJanA3SW5SNWNHVWlPbHNpVUhKdlptbHNaU0pkTENKdVlXMWxJam9pU205aWN5Qm1iM0lnZEdobElFWjFkSFZ5WlNBb1NrWkdLU0lzSW5WeWJDSTZJbWgwZEhCek9pOHZkM2QzTG1wbVppNXZjbWN2SWl3aWFXMWhaMlVpT2lKb2RIUndjem92TDNjell5MWpZMmN1WjJsMGFIVmlMbWx2TDNaakxXVmtMM0JzZFdkbVpYTjBMVEV0TWpBeU1pOXBiV0ZuWlhNdlNrWkdYMHh2WjI5TWIyTnJkWEF1Y0c1bklpd2lhV1FpT2lKa2FXUTZhMlY1T25vMlRXdHFiMUpvY1RGcVUwNUtaRXhwY25WVFdISkdSbmhoWjNGeWVuUmFZVmhJY1VoSFZWUkxTbUpqVG5sM2NDSjlMQ0pqY21Wa1pXNTBhV0ZzVTNWaWFtVmpkQ0k2ZXlKMGVYQmxJanBiSWtGamFHbGxkbVZ0Wlc1MFUzVmlhbVZqZENKZExDSmhZMmhwWlhabGJXVnVkQ0k2ZXlKcFpDSTZJblZ5YmpwMWRXbGtPbUZqTWpVMFltUTFMVGhtWVdRdE5HSmlNUzA1WkRJNUxXVm1aRGt6T0RVek5qa3lOaUlzSW5SNWNHVWlPbHNpUVdOb2FXVjJaVzFsYm5RaVhTd2libUZ0WlNJNklrcEdSaUI0SUhaakxXVmtkU0JRYkhWblJtVnpkQ0F6SUVsdWRHVnliM0JsY21GaWFXeHBkSGtpTENKa1pYTmpjbWx3ZEdsdmJpSTZJbFJvYVhNZ2QyRnNiR1YwSUhOMWNIQnZjblJ6SUhSb1pTQjFjMlVnYjJZZ1Z6TkRJRlpsY21sbWFXRmliR1VnUTNKbFpHVnVkR2xoYkhNZ1lXNWtJR2hoY3lCa1pXMXZibk4wY21GMFpXUWdhVzUwWlhKdmNHVnlZV0pwYkdsMGVTQmtkWEpwYm1jZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCeVpYRjFaWE4wSUhkdmNtdG1iRzkzSUdSMWNtbHVaeUJLUmtZZ2VDQldReTFGUkZVZ1VHeDFaMFpsYzNRZ015NGlMQ0pqY21sMFpYSnBZU0k2ZXlKMGVYQmxJam9pUTNKcGRHVnlhV0VpTENKdVlYSnlZWFJwZG1VaU9pSlhZV3hzWlhRZ2MyOXNkWFJwYjI1eklIQnliM1pwWkdWeWN5QmxZWEp1WldRZ2RHaHBjeUJpWVdSblpTQmllU0JrWlcxdmJuTjBjbUYwYVc1bklHbHVkR1Z5YjNCbGNtRmlhV3hwZEhrZ1pIVnlhVzVuSUhSb1pTQndjbVZ6Wlc1MFlYUnBiMjRnY21WeGRXVnpkQ0IzYjNKclpteHZkeTRnVkdocGN5QnBibU5zZFdSbGN5QnpkV05qWlhOelpuVnNiSGtnY21WalpXbDJhVzVuSUdFZ2NISmxjMlZ1ZEdGMGFXOXVJSEpsY1hWbGMzUXNJR0ZzYkc5M2FXNW5JSFJvWlNCb2IyeGtaWElnZEc4Z2MyVnNaV04wSUdGMElHeGxZWE4wSUhSM2J5QjBlWEJsY3lCdlppQjJaWEpwWm1saFlteGxJR055WldSbGJuUnBZV3h6SUhSdklHTnlaV0YwWlNCaElIWmxjbWxtYVdGaWJHVWdjSEpsYzJWdWRHRjBhVzl1TENCeVpYUjFjbTVwYm1jZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCMGJ5QjBhR1VnY21WeGRXVnpkRzl5TENCaGJtUWdjR0Z6YzJsdVp5QjJaWEpwWm1sallYUnBiMjRnYjJZZ2RHaGxJSEJ5WlhObGJuUmhkR2x2YmlCaGJtUWdkR2hsSUdsdVkyeDFaR1ZrSUdOeVpXUmxiblJwWVd4ekxpSjlMQ0pwYldGblpTSTZleUpwWkNJNkltaDBkSEJ6T2k4dmR6TmpMV05qWnk1bmFYUm9kV0l1YVc4dmRtTXRaV1F2Y0d4MVoyWmxjM1F0TXkweU1ESXpMMmx0WVdkbGN5OUtSa1l0VmtNdFJVUlZMVkJNVlVkR1JWTlVNeTFpWVdSblpTMXBiV0ZuWlM1d2JtY2lMQ0owZVhCbElqb2lTVzFoWjJVaWZYMHNJbWxrSWpvaVpHbGtPbXRsZVRwNlJHNWhaVmxpTjBSaGExRlhiVmxyY2t4cmJYTldSVkpCWVhwR05WbGhNVWMxYm5oaVUyNVJZMHhLV2poRGNqRTNJbjBzSW1semMzVmhibU5sUkdGMFpTSTZJakl3TWpVdE1EY3RNekJVTWpNNk16azZNREl1T1RJeE1EQXlNVGN5V2lJc0ltVjRjR2x5WVhScGIyNUVZWFJsSWpvaU1qQXlOaTB3Tnkwek1GUXlNem96T1Rvd01pNDVNakV3T1RVeU56TmFJbjBzSW1wMGFTSTZJblZ5YmpwMWRXbGtPbVZoWldJNFpHVTVMV1V4TkRBdE5HWmtNeTA0TW1Oa0xUSTVaR1l6TjJObU1UZGxZeUlzSW1WNGNDSTZNVGM0TlRRMU5EYzBNaXdpYVdGMElqb3hOelV6T1RFNE56UXlMQ0p1WW1ZaU9qRTNOVE01TVRnM05ESjkuOWJiRGl1My1xM25xYl9JVXRFWlVuaENLdlpfYUs0QjBuaGNBUnpsb0FQU2NNM25kZUhWYTV2cG9kbEd1Z0lWUXB6TzFPSGlEcGN3dVZzT0JPakNrQlEiXX19.Od6DX18rTycJQxsdgozwgN3NVXUkti-e_OpJig75Kn18VOKaFl98y5KnPE3KIa5rFfmU_fyzWKzkPtvP9oQqBw"
		        val presentation = JwtVcJsonPresentation.parse(jwtVp1)
		            .getOrThrow()
		        println("W3C Presentation: $presentation")

		        val result = runCatching {
		            presentation.presentationVerification(
		                expectedAudience = "verifier2-example",
		                expectedNonce = "cfd1cabf-081e-4e7b-9751-6fbd5722e88e"
		            )
		        }
		        check(result.isFailure) { "Should have failed validation" }
		        println("Expecting failure. Is failure = ${result.isFailure}. Exception = ${result.exceptionOrNull()}")
		    }

		    @Test
		    fun testValidationFailureInvalidNonce() = runTest {
		        init()
		        val vp =
                    "eyJ4NWMiOlsiTUlJQ0NUQ0NBYkNnQXdJQkFnSVVmcXlpQXJKWm9YN002MS80NzNVQVZpMi9VcGd3Q2dZSUtvWkl6ajBFQXdJd0tERUxNQWtHQTFVRUJoTUNRVlF4R1RBWEJnTlZCQU1NRUZkaGJIUnBaQ0JVWlhOMElFbEJRMEV3SGhjTk1qVXdOakF5TURZME1URXpXaGNOTWpZd09UQXlNRFkwTVRFeldqQXpNUXN3Q1FZRFZRUUdFd0pCVkRFa01DSUdBMVVFQXd3YlYyRnNkR2xrSUZSbGMzUWdSRzlqZFcxbGJuUWdVMmxuYm1WeU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRVB6cDZlVlNBZFhFUnFBcDhxOE91REVobDJJTEdBYW9hUVhUSjJzRDJnNVhwM0NGUURNck1wUi9TUTBqdC9qVE9xRXhrMVBSempRNzlhS3BJc0pNMW1xT0JyRENCcVRBZkJnTlZIU01FR0RBV2dCVHhDbjJuV01yRTcwcVhiNjE0VTE0QndlWTJhekFkQmdOVkhRNEVGZ1FVeDVxa09MQzRscGwxeHBZWkdtRjlITHh0cDBnd0RnWURWUjBQQVFIL0JBUURBZ2VBTUJvR0ExVWRFZ1FUTUJHR0QyaDBkSEJ6T2k4dmQyRnNkQzVwWkRBVkJnTlZIU1VCQWY4RUN6QUpCZ2NvZ1l4ZEJRRUNNQ1FHQTFVZEh3UWRNQnN3R2FBWG9CV0dFMmgwZEhCek9pOHZkMkZzZEM1cFpDOWpjbXd3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnSFRhcDNjNnlDVU5oRFZmWldCUE1LajlkQ1daYnJNRTAza2g5TkpUYncxRUNJQXZWdnVHbGw5TzIxZVIxNlNrSkhIQUExcFBjb3ZoY1R2RjlmejljYzY2TSJdLCJ0eXAiOiJkYytzZC1qd3QiLCJhbGciOiJFUzI1NiJ9.eyJfc2QiOlsiMFlvVXQxVXNjc24xLTEzQWI3dTkzSDJCdGI1aGNiZks4OXFXMGlETTdWTSIsIkwtUHZWYlNNbWVtQngyZFY0b0UzcEEyUXhCNVg3dU0tb2dGWFU0T1hYNmciLCJPSTZmMnQzT2RuZ04tQ1IwNXJzcENfUWZqZEVJWG13TkR5LVNBUlNjTHZVIiwiUXBla1hnYmowSm92UldEc2J5Wm0ySVpPQzRnM3o1aGRISXY4aWd3NkNSRSIsImFXSGhleEtiVEdodXVWb0RoMnhrSkdYdWttTHJ0UmtNV3A1ZnJqM1BKSkEiLCJ3enJsVmNGb3RCd1hvNFdGSlhhaVNYOHd6ckpvbXRzNFRmUG9TcTdTOW1NIiwieGwzMTVTam5WcGRhZlVKbFQtRXowVkt5aHpnX0s5WTVJY2RSdzlhWnBiRSJdLCJ2Y3QiOiJ1cm46ZXVkaTpwaWQ6MSIsImlzcyI6Imh0dHBzOi8vbG9jYWxob3N0LmVtb2JpeC5jby51azo4NDQzL3Rlc3QvMlVRejBIRUxnYXFBOWhoIiwiY25mIjp7Imp3ayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6ImUxaWZnNnlPUnpvbUtncEE5ZmhFY2xmTE9EX1l5aTdHWUVHRjVEc2dleXMiLCJ5IjoiWmNnWXBrbi1IVHNfZDJ0Q3dSeUE2T0lsN29STE1GTGtVOU92d2tkMmRfOCJ9fSwiZXhwIjoxNzYyMTQ3NjE0LCJpYXQiOjE3NjA5MzgwMTQsImFnZV9lcXVhbF9vcl9vdmVyIjp7Il9zZCI6WyItbHZ5MHlWQUxSUGUyMGk0UVZoaWlrUFZNdmlBUzJIMVl6VTJOMHpVcVVjIiwiN0hZR05qb2Jtd09YV01sRXBnSkZlN0loTnlPQV9jWWI3emdRdEZ3WmlsbyIsIkxaSTJnM3FRZWJTSE1Dajh2OEdxWUlyRDNERFdjWEhLcV9hazVJN0FpQU0iLCJtempqQjd1Z3FfSlJNTHZrcTFMZndlUmczZXlISURRVS1iNnFlNVZwcy04IiwieWtfN01WRGNaS2dBRE1FUloxZ2Rua2tGQmlYU29weTd3UmJKSGJnMk1pdyJdfX0.yOiR_tahOyeu8FNq_X0XMyCgtZ8JnXQ1w1_9YksCeV_ebRJGoWGd6dZxPFftO4ZUDkDfGqx_bt2IvXs7uKFqMA~WyJTQTVfTUhvZkJFclNWbWl6S245VktnIiwiZ2l2ZW5fbmFtZSIsIkplYW4iXQ~WyJHS3JLMGlWNXA5djNJWURTYnVUN21RIiwiZmFtaWx5X25hbWUiLCJEdXBvbnQiXQ~WyJSTm9pYVF0RmZGQTFaRDZPXy1sbzhnIiwiYmlydGhkYXRlIiwiMTk4MC0wNS0yMyJd~WyJRYW9zRHRreXRxazJvbHZuSFBjVFdBIiwiYWdlX2luX3llYXJzIiwiNDQiXQ~WyJsTXZ6MVBkN1lrZE5xYnFjeDJxbDV3IiwiMjEiLHRydWVd~WyI5a0Z5bGdXXzB0b01OVUZNREQ3S3ZnIiwiNjUiLGZhbHNlXQ~eyJ0eXAiOiJrYitqd3QiLCJhbGciOiJFUzI1NiJ9.eyJzZF9oYXNoIjoiZ0NMeHF5ZXdpRE0wRzhCdEVTWjJFNzk1aTA4U1pIUjFTZUotSXNDeHZ1MCIsImF1ZCI6Ing1MDlfc2FuX2Ruczp0ZXN0MTIzIiwiaWF0IjoxNzYwOTM4MDE0LCJub25jZSI6IjNjMDRjNWZjLTkzMDYtNDBmYS1iNTQ0LTBlMDA0NzRhY2UwOSJ9.W07BdEyH_TMXxhdPzYwPaitcZ9SYxapQt8Q082UwyVxb8V4u1cIcJQ0tdAfhEaYk0--ymThiGsHuUwvjAH5xiw"
                val presentation = DcSdJwtPresentation.parse(vp)
		            .getOrThrow()
		        println("DC-SDJWT2 Presentation: $presentation")

		        val result = runCatching {
		            presentation.presentationVerification(
		                expectedAudience = "x509_san_dns:test123",
		                expectedNonce = "abc",
		                originalClaimsQuery = emptyList()
		            )
		        }
		        check(result.isFailure) { "Should have failed validation" }
		        println("Expecting failure. Is failure = ${result.isFailure}. Exception = ${result.exceptionOrNull()}")

		    }


}
