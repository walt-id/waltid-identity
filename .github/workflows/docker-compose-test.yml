name: Docker Compose test pipeline

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}

      - name: Delete old Fedora Pod
        run: kubectl -n compose delete -f docker-compose/podman.yaml
        continue-on-error: true

      - name: Deploy Fedora Pod
        run: kubectl -n compose apply -f docker-compose/podman.yaml

      - name: Wait for pod to be ready
        run: kubectl -n compose wait --for=condition=ready pod -l app=podman-priv --timeout=120s


      - name: Get Pod Name
        id: get-pod
        run: echo "POD_NAME=$(kubectl -n compose get pods -l app=podman-priv -o jsonpath='{.items[0].metadata.name}')" >> "$GITHUB_OUTPUT"

      - name: Print Pod Name
        env:
          POD_NAME: ${{ steps.get-pod.outputs.POD_NAME }}
        run: echo "$POD_NAME"

      - name: Wait for project directory to be cloned
        run:  |
          POD_NAME=${{ steps.get-pod.outputs.POD_NAME }}
          TIMEOUT=60  # 1 minute timeout
          INTERVAL=5  # Check every 5 seconds
          ELAPSED=0
          until kubectl -n compose exec -it "$POD_NAME" -- test -d /waltid-identity || [ $ELAPSED -ge $TIMEOUT ]; do
            echo "Waiting for project directory..."
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Error: Project directory not found within 1 minute"
            exit 1
          fi
          echo "Project directory found."
          kubectl -n compose exec -it "$POD_NAME" -- ls -l /waltid-identity
          
          
          #      - name: Wait for Docker Compose containers to be ready
#        run: |
#          POD_NAME=${{ steps.get-pod.outputs.POD_NAME }}
#          TIMEOUT=300  # 5 minutes timeout
#          INTERVAL=5  # Check every 10 seconds
#          ELAPSED=0
#          CONTAINER_COUNT=0
          
#          until [ "$CONTAINER_COUNT" -gt 0 ] || [ $ELAPSED -ge $TIMEOUT ] ; do
#            CONTAINER_COUNT=$(kubectl -n compose exec "$POD_NAME" -- sh -c "cd /waltid-identity/docker-compose && podman-compose ps -q | wc -l")
#            sleep $INTERVAL
#            ELAPSED=$((ELAPSED + INTERVAL))
#            echo "$CONTAINER_COUNT"
#          done
          
#          until [ $ELAPSED -ge $TIMEOUT ] ; do    
#            CONTAINER_COUNT=$(kubectl -n compose exec "$POD_NAME" -- sh -c "cd /waltid-identity/docker-compose && podman-compose ps -q | wc -l")
#            RUNNING_COUNT=$(kubectl -n compose exec "$POD_NAME" -- sh -c "cd /waltid-identity/docker-compose && podman-compose ps -q | xargs podman inspect -f '{{.State.Status}}' | grep -c 'running'")
#            echo "container: $CONTAINER_COUNT"
#            echo "running: $RUNNING_COUNT"
#            if [ "$CONTAINER_COUNT" -eq "$RUNNING_COUNT" ]; then
#              echo "All Docker Compose containers are up and running."
#              exit 0
#            else
#              echo "Waiting for Docker Compose containers to be up... ($ELAPSED/$TIMEOUT seconds)"
#              sleep $INTERVAL
#              ELAPSED=$((ELAPSED + INTERVAL))
#            fi
#          done
#          echo "Error: Docker Compose containers not up within 5 minutes"
#          exit 1

      - name: Health check for wallet-api
        run: |
          TIMEOUT=180  # 3 minute timeout for the health check
          INTERVAL=5  # Check every 5 seconds
          ELAPSED=0
          POD_NAME=${{ steps.get-pod.outputs.POD_NAME }}
          until kubectl -n compose exec "$POD_NAME" -- sh -c "curl -sf -X GET http://localhost:7001/livez > /dev/null 2>&1" || [ $ELAPSED -ge $TIMEOUT ]; do
            echo "Waiting for wallet-api to be healthy... ($ELAPSED/$TIMEOUT seconds)"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          
          done
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "Error: wallet-api is not healthy within $TIMEOUT seconds"
            exit 1
          fi
          echo "wallet-api is healthy."

      - name: Run Tests
        run: kubectl -n compose exec --stdin ${{ steps.get-pod.outputs.POD_NAME }}  -- sh -c "cd waltid-identity/docker-compose && pip3 install requests && python3 api-test.py"
