# The below credential types will be used as default:
# By overriding `supportedCredentialTypes` you can change what credentials the issuer shall advertise.

# supportedCredentialTypes = {
    # BankId = [VerifiableCredential, BankId]
    # KycChecksCredential = [VerifiableCredential, VerifiableAttestation, KycChecksCredential],
    # KycCredential = [VerifiableCredential, VerifiableAttestation, KycCredential]
    # KycDataCredential = [VerifiableCredential, VerifiableAttestation, KycDataCredential]
    # PassportCh = [VerifiableCredential, VerifiableAttestation, VerifiableId, PassportCh]
    # PND91Credential = [VerifiableCredential, PND91Credential]
    # MortgageEligibility = [VerifiableCredential, VerifiableAttestation, VerifiableId, MortgageEligibility]
    # PortableDocumentA1 = [VerifiableCredential, VerifiableAttestation, PortableDocumentA1]
    # OpenBadgeCredential = [VerifiableCredential, OpenBadgeCredential]
    # VaccinationCertificate = [VerifiableCredential, VerifiableAttestation, VaccinationCertificate]
    # WalletHolderCredential = [VerifiableCredential, WalletHolderCredential]
    # UniversityDegree = [VerifiableCredential, UniversityDegree]
    # VerifiableId = [VerifiableCredential, VerifiableAttestation, VerifiableId]
    # CTWalletSameAuthorisedInTime = [VerifiableCredential, VerifiableAttestation, CTWalletSameAuthorisedInTime]
    # CTWalletSameAuthorisedDeferred = [VerifiableCredential, VerifiableAttestation, CTWalletSameAuthorisedDeferred]
    # CTWalletSamePreAuthorisedInTime = [VerifiableCredential, VerifiableAttestation, CTWalletSamePreAuthorisedInTime]
    # CTWalletSamePreAuthorisedDeferred = [VerifiableCredential, VerifiableAttestation, CTWalletSamePreAuthorisedDeferred]
    # AlpsTourReservation = [VerifiableCredential, VerifiableAttestation, AlpsTourReservation]
    # EducationalID = [VerifiableCredential, VerifiableAttestation, EducationalID]
    # HotelReservation = [VerifiableCredential, VerifiableAttestation, HotelReservation]
    # Iso18013DriversLicenseCredential = [VerifiableCredential, VerifiableAttestation, Iso18013DriversLicenseCredential]
    # TaxReceipt = [VerifiableCredential, VerifiableAttestation, TaxReceipt]
    # VerifiablePortableDocumentA1 = [VerifiableCredential, VerifiableAttestation, VerifiablePortableDocumentA1]
    # Visa = [VerifiableCredential, VerifiableAttestation, Visa]
    # eID = [VerifiableCredential, VerifiableAttestation, eID]
    # NaturalPersonVerifiableID = [VerifiableCredential, VerifiableAttestation, NaturalPersonVerifiableID]
    # BoardingPass = [VerifiableCredential, VerifiableAttestation, BoardingPass]
    # LegalPerson = [VerifiableCredential, LegalPerson],
    # LegalRegistrationNumber = [VerifiableCredential, LegalRegistrationNumber],
    # GaiaXTermsAndConditions = [VerifiableCredential, GaiaXTermsAndConditions],
    #
    # "org.iso.18013.5.1.mDL" = {
    #     format = mso_mdoc
    #     cryptographic_binding_methods_supported = ["cose_key"]
    #     credential_signing_alg_values_supported = ["ES256"]
    #     proof_types_supported = { cwt = { proof_signing_alg_values_supported = ["ES256"] } }
    #     types = ["org.iso.18013.5.1.mDL"]
    #     doctype = "org.iso.18013.5.1.mDL"
    # }
    #
    # "urn:eu.europa.ec.eudi:pid:1" = {
    #     format = "vc+sd-jwt"
    #     cryptographic_binding_methods_supported = ["jwk"]
    #     credential_signing_alg_values_supported = ["ES256"]
    #     types = ["urn:eu.europa.ec.eudi:pid:1"]
    #     doctype = "urn:eu.europa.ec.eudi:pid:1"
    # }
    #
    # "identity_credential_vc+sd-jwt" = {
    #     format = "vc+sd-jwt",
    #     cryptographic_binding_methods_supported = ["jwk"]
    #     credential_signing_alg_values_supported = ["ES256"]
    #     types = ["identity_credential_vc+sd-jwt"],
    #     doctype = "identity_credential_vc+sd-jwt",
    #     vct = "https://example.org/identity_credential",
    #     display = [{
    #         name = "Test Credential",
    #         locale = "en-US",
    #         description = "This is a test credential",
    #         logo = {
    #             url = "https://example.com/logo.png",
    #             altText = "Logo"
    #         },
    #         backgroundColor = "#FFFFFF",
    #         textColor = "#000000",
    #         backgroundImage = {
    #             url = "https://example.com/background.png",
    #             altText = "Background"
    #         }
    #         secondaryImage = {
    #             url = "https://example.com/secondary.png",
    #             altText = "Secondary Image"
    #         }
    #     }],
    #     sdJwtVcTypeMetadata = {
    #         vct = "https://example.org/identity_credential",
    #         name = "Identity Credential",
    #         description = "The Identity Verifiable Credential"
    #     }
    # }
# }
